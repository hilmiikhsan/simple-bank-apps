// Code generated by MockGen. DO NOT EDIT.
// Source: payment_usecase_interface.go

// Package mock_payment is a generated GoMock package.
package mock_payment

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	dto "github.com/simple-bank-apps/dto"
)

// MockPaymentUsecase is a mock of PaymentUsecase interface.
type MockPaymentUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentUsecaseMockRecorder
}

// MockPaymentUsecaseMockRecorder is the mock recorder for MockPaymentUsecase.
type MockPaymentUsecaseMockRecorder struct {
	mock *MockPaymentUsecase
}

// NewMockPaymentUsecase creates a new mock instance.
func NewMockPaymentUsecase(ctrl *gomock.Controller) *MockPaymentUsecase {
	mock := &MockPaymentUsecase{ctrl: ctrl}
	mock.recorder = &MockPaymentUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentUsecase) EXPECT() *MockPaymentUsecaseMockRecorder {
	return m.recorder
}

// Payment mocks base method.
func (m *MockPaymentUsecase) Payment(ctx context.Context, req dto.PaymentRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Payment", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Payment indicates an expected call of Payment.
func (mr *MockPaymentUsecaseMockRecorder) Payment(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Payment", reflect.TypeOf((*MockPaymentUsecase)(nil).Payment), ctx, req)
}
